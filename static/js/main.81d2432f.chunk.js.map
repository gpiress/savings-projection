{"version":3,"sources":["savings-page/SavingsTooltip.tsx","savings-page/SavingsPage.tsx","savings-page/computeSavings.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SavingsTooltip","active","payload","length","uniqueEntries","forEach","entry","filter","itemList","monthly","push","entries","map","index","toLocaleString","total","value","style","currency","text","className","yearsPassed","SavingsPage","props","state","monthlySavings","relevantYears","totalSavingsData","averageYearlyReturn","taxOnTotal","initialCapital","minimumMonthlyIncome","handleInputChange","bind","this","computeDataPoints","dataPoints","averageReturn","savingsDataPoints","totalSavings","Map","saving","set","maxYear","reduce","max","current","i","savings","yearly","previous","get","returnOnPrevious","newTotal","simulate","setState","event","target","name","colors","linesElements","relevantPoints","dataPoint","Line","data","type","dataKey","stroke","strokeWidth","retireSavings","ResponsiveContainer","width","height","LineChart","margin","left","CartesianGrid","strokeDasharray","XAxis","domain","YAxis","Tooltip","content","onChange","href","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81d2432f.chunk.js","sourcesContent":["import { TooltipProps } from 'recharts';\r\nimport './savings-tooltip.css';\r\n\r\n\r\nconst SavingsTooltip = ({ active, payload }: TooltipProps<number, string>) => {\r\n    if (active && payload && payload.length) {\r\n        const uniqueEntries: Array<any> = [];\r\n        payload.forEach(entry => {\r\n            const found = uniqueEntries.filter(itemList => itemList.payload?.monthly === entry.payload?.monthly).length > 0;\r\n            if (!found) {\r\n                uniqueEntries.push(entry);\r\n            }\r\n        });\r\n\r\n        const entries = uniqueEntries.map((entry, index) => {\r\n            const monthly = entry.payload?.monthly?.toLocaleString('SE');\r\n            const total = entry.value?.toLocaleString('en-US', { style: 'currency', currency: 'SEK' });\r\n            const text = `${monthly} - ${total}`;\r\n            return (\r\n                <p className=\"custom-tooltip--value\" key={index}>{text}</p>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"custom-tooltip\">\r\n                <span className=\"custom-tooltip--years\">After {payload?.[0]?.payload?.yearsPassed} years</span>\r\n                <div className=\"custom-tooltip--values-list\">\r\n                    { entries }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport default SavingsTooltip;","import React, { Component, ChangeEvent } from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\r\n\r\nimport SavingsDataPoint from './SavingsDataPoint';\r\nimport SavingsTooltip from './SavingsTooltip';\r\nimport { simulate } from './computeSavings';\r\n\r\nimport './savings-page.css'\r\n\r\ninterface SavingsPageState {\r\n    monthlySavings: Array<number>;\r\n    relevantYears: Array<number>;\r\n    totalSavingsData: Array<SavingsDataPoint>;\r\n    averageYearlyReturn: number;\r\n    taxOnTotal: number;\r\n    initialCapital: number;\r\n    minimumMonthlyIncome: number;\r\n}\r\n\r\ninterface SavingsPageProps {}\r\n\r\n\r\nclass SavingsPage extends Component<SavingsPageProps, SavingsPageState> {\r\n\r\n    constructor(props: SavingsPageProps) {\r\n        super(props);\r\n        this.state = {\r\n            monthlySavings: [1000, 2500, 5000, 7500, 10000, 15000],\r\n            relevantYears: [0, 5, 10, 15, 20, 25, 30, 35, 40],\r\n            totalSavingsData: [],\r\n            averageYearlyReturn: 0.05,\r\n            taxOnTotal: 0.00375,\r\n            initialCapital: 0,\r\n            minimumMonthlyIncome: 0,\r\n        };\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.computeDataPoints();\r\n    }\r\n\r\n    computeDataPoints() {\r\n        const { monthlySavings, relevantYears, averageYearlyReturn, taxOnTotal, initialCapital } = this.state\r\n        const dataPoints = simulate(initialCapital, monthlySavings, relevantYears, averageYearlyReturn, taxOnTotal);\r\n\r\n        this.setState({ totalSavingsData: dataPoints });\r\n    }\r\n\r\n    handleInputChange(event: ChangeEvent<HTMLInputElement>) {\r\n        const target = event.target;\r\n        const value = +target.value;\r\n        const name = target.name;\r\n\r\n        if (name === \"averageYearlyReturn\" && value >= 0 && value <= 1) {\r\n            this.setState({\r\n                averageYearlyReturn: value\r\n            });\r\n        } else if (name === \"taxOnTotal\" && value >= 0 && value <= 1) {\r\n            this.setState({\r\n                taxOnTotal: value\r\n            });\r\n        } else if (name === \"initialCapital\" && value >= 0) {\r\n            this.setState({\r\n                initialCapital: value\r\n            });\r\n        } else if (name === \"minimumMonthlyIncome\" && value >= 0) {\r\n            this.setState({\r\n                minimumMonthlyIncome: value\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dataPoints = this.state.totalSavingsData;\r\n        const savings = this.state.monthlySavings;\r\n\r\n        const colors = [\r\n            \"#1E3231\",\r\n            \"#485665\",\r\n            \"#558C8C\",\r\n            \"#8E7C93\",\r\n            \"#D0A5C0\",\r\n            \"#F6C0D0\",\r\n            \"#82204A\",\r\n        ];\r\n\r\n        const linesElements = savings.map((saving, index) => {\r\n            const relevantPoints = dataPoints\r\n                .filter(dataPoint => dataPoint.monthly === saving)\r\n                .filter(dataPoint => dataPoint.yearsPassed % 5 === 0);\r\n            return (\r\n                <Line data={relevantPoints} type=\"monotone\" dataKey=\"total\" stroke={colors[index]} strokeWidth={3} key={index} />\r\n            );\r\n        });\r\n\r\n        const retireSavings = (this.state.minimumMonthlyIncome * 12 * 25).toLocaleString('en-US', { style: 'currency', currency: 'SEK' });\r\n\r\n        return (\r\n            <div>\r\n                <h1>Savings projector</h1>\r\n                <div className=\"savings-page\">\r\n                    <div className=\"savings-page--chart-area\">\r\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                            <LineChart data={dataPoints} margin={{left: 30}}>\r\n                                { linesElements }\r\n                                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                                <XAxis type=\"number\" dataKey=\"yearsPassed\" domain={[0, 'dataMax']} />\r\n                                <YAxis />\r\n                                <Tooltip content={SavingsTooltip}/>\r\n                            </LineChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n                    <div className=\"savings-page--info-area\">\r\n                        <div className=\"info-area--block\">\r\n                            <span className=\"info-area--block-header\"># Customize</span>\r\n                            <div className=\"info-area--block--input-area\">\r\n                                <span>Average yearly return (0-1)*</span>\r\n                                <input type=\"number\" name=\"averageYearlyReturn\" value={this.state.averageYearlyReturn} onChange={this.handleInputChange}></input>\r\n                            </div>\r\n\r\n                            <div className=\"info-area--block--input-area\">\r\n                                <span>Taxes on total (0-1)**</span>\r\n                                <input type=\"number\" name=\"taxOnTotal\" value={this.state.taxOnTotal} onChange={this.handleInputChange}></input>\r\n                            </div>\r\n\r\n                            <div className=\"info-area--block--input-area\">\r\n                                <span>Starting capital (no decimals)</span>\r\n                                <input type=\"number\" name=\"initialCapital\" value={this.state.initialCapital} onChange={this.handleInputChange}></input>\r\n                            </div>\r\n\r\n                            <div className=\"info-area-block--footnote\">\r\n                                <a href=\"https://www.investopedia.com/ask/answers/042415/what-average-annual-return-sp-500.asp\">* S&P 500 historical yearly return is roughly 8%</a>\r\n                                <br />\r\n                                <span>** Swedish ISK accounts yearly tax is 0.375% = 0.00375</span>\r\n                            </div>\r\n\r\n                            <button className=\"info-area--button\" onClick={(event) => this.computeDataPoints()}>Render</button>\r\n                        </div>\r\n\r\n                        <div className=\"info-area--block\">\r\n                            <span className=\"info-area--block-header\"># Retire early</span>\r\n                            <div className=\"info-area--block--input-area\">\r\n                                <span>Minimum monthly income</span>\r\n                                <input type=\"number\" name=\"minimumMonthlyIncome\" value={this.state.minimumMonthlyIncome} onChange={this.handleInputChange}></input>\r\n                            </div>\r\n\r\n                            <div className=\"info-area--block--input-area\">\r\n                                <span>Amount needed to retire</span>\r\n                                <span>{retireSavings}</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"info-area--block\">\r\n                            <span className=\"info-area--block-header\"># Fixed</span>\r\n                            <div className=\"info-area--block--input-area\">\r\n                                <span>Monthly savings</span>\r\n                                <span className=\"info-area--block--fixed-values\">[1000, 2500, 5000, 7500, 10000, 15000]</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"info-area--block\">\r\n                            <span className=\"info-area--block-header\"># How it works</span>\r\n                            <p>For every year, it computes:</p>\r\n                            <ol>\r\n                                <li>the yearly returns <code className=\"info--code\">yearlyReturns = previousSavings * averageYearlyReturn</code>,</li>\r\n                                <li>the taxes to be paid* <span className=\"info--code\">taxes = (previousSavings + yearlyReturns) * taxOnTotal</span></li>\r\n                                <li>and the new savings total: <span className=\"info--code\">newTotal = previousSavings + yearlyReturns - taxes + yearSavings</span></li>\r\n                            </ol>\r\n                            <div className=\"info-area-block--footnote\">\r\n                                <span>* Swedish ISK accounts pay yearly taxes based on the total amount in the account.</span>\r\n                            </div>\r\n                            <a href=\"https://github.com/gpiress/savings-projection\" className=\"info-area--link\">Check the code on Github.</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SavingsPage;","import SavingsDataPoint from \"./SavingsDataPoint\";\r\n\r\n\r\nconst simulate = (initialCapital: number, monthlySavings: Array<number>, relevantYears: Array<number>, averageReturn: number, taxOnTotal: number)\r\n        : Array<SavingsDataPoint> => {\r\n    let savingsDataPoints: Array<SavingsDataPoint> = [];\r\n\r\n    let totalSavings: Map<number, number> = new Map();\r\n    monthlySavings.forEach(saving => { \r\n        totalSavings.set(saving, initialCapital);\r\n        savingsDataPoints.push({\r\n            monthly: saving,\r\n            total: initialCapital,\r\n            yearsPassed: 0,\r\n        });\r\n    });\r\n\r\n    const maxYear: number = relevantYears.reduce((max, current) => current > max ? current : max, -1);\r\n\r\n    for (let i = 1; i <= maxYear; i++) {\r\n\r\n        monthlySavings.forEach(savings => {\r\n            const yearly = savings * 12;\r\n            const previous = totalSavings.get(savings) || 0;\r\n            const returnOnPrevious = previous * averageReturn;\r\n            const taxes = (previous + returnOnPrevious) * taxOnTotal;\r\n\r\n            const newTotal = yearly + previous + returnOnPrevious - taxes;\r\n            totalSavings.set(savings, newTotal);\r\n\r\n            savingsDataPoints.push({\r\n                monthly: savings,\r\n                total: newTotal,\r\n                yearsPassed: i,\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n\r\n    return savingsDataPoints;\r\n};\r\n\r\nexport {\r\n    simulate\r\n};","import React from 'react';\nimport './App.css';\n\nimport SavingsPage from './savings-page/SavingsPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SavingsPage />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}